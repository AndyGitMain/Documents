
;;==================================================================
;; Mode
;;==================================================================
;; select mode
(setq auto-mode-alist (append
		       '(("\\.c$" . c-mode)
				 ("\\.h$" . c-mode)
				 ("\\.C$" . c++-mode)
				 ("\\.cc$" . c++-mode)
				 ("\\.H$" . c++-mode)
				 ("\\.hh$" . c++-mode)
				 ("\\.cxx$" . c++-mode)
				 ("\\.hxx$" . c++-mode)
				 ("\\.cpp$" . c++-mode)
				 ("\\.hpp$" . c++-mode)
				 ("\\.tex$" . TeX-mode)
				 ("\\.txi$" . Texinfo-mode)
				 ("\\.el$" . emacs-lisp-mode)
				 (".emacs" . lisp-mode)
				 ("\\.a$" . c-mode))
			   auto-mode-alist))


;;==================================================================
;; Package Manager
;;==================================================================
(require 'package)
(dolist (source '(("gnu" . "http://elpa.gnu.org/packages/")
                  ("org" . "http://orgmode.org/elpa/")
                  ("melpa" . "http://melpa.milkbox.net/packages/")
                  ))
  (add-to-list 'package-archives source t))
(package-initialize)


;;==================================================================
;; Color Themes
;;==================================================================
;; customize-themes
(load-theme 'tango-dark)


;;==================================================================
;; General Setting
;;==================================================================
;; show time on status bar
(display-time)

;; syntax highlighting
(global-font-lock-mode t)

;; set fonts
(set-default-font "Monospace-10")

;; disable making a backup file
(setq make-backup-files nil)

;; disable welcome message
(setq inhibit-startup-message t)

;; disable auto-save
(setq auto-save-default nil)

;; mouse scrolling
(setq mouse-wheel-scroll-amount '(10))

;; enable mouse acceleration
(setq mouse-wheel-progressive-speed nil)

;; disable tool bar below menu bar
(tool-bar-mode -1)

;; set frame size and position
(set-frame-position (selected-frame) 0 0)
(set-frame-height (selected-frame) 50)
(set-frame-width (selected-frame) 180)

;; scrolling
(setq scroll-step            2
      scroll-conservatively  10000)


;;==================================================================
;; Windows and Buffer
;;==================================================================
;; When activated, it allows you to "undo" (and "redo") changes
;; in the window configuration
;; C-c left / C-c right
(winner-mode 1)

;; move between windows with the [shift + arrow keys]
(windmove-default-keybindings)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ede-project-directories (quote ("/home/andy/Git/DeviceDriver")))
 '(ido-mode (quote both) nil (ido))
 '(package-selected-packages (quote (projectile ecb magit avy company which-key))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;;==================================================================
;; Shell-Switcher
;;==================================================================
;; Manage multiple terminal buffer
;; C + '
(require 'shell-switcher)
(setq shell-switcher-mode t)




;;==================================================================
;; Programming
;;==================================================================
;; show parenthesis matching
(show-paren-mode t)

;; set tab
(setq default-tab-width 4
      c-basic-offset 4)

;; always insert indent at ENTER-key
(define-key global-map (kbd "RET") 'newline-and-indent)

;; line number at info bar
(setq line-number-mode t)




;;==================================================================
;; Yasnippet and auto-complete
;;==================================================================
;;; yasnippet
;;; should be loaded before auto complete so that they can work together
(require 'yasnippet)
(yas-global-mode 1)

;;; auto complete mod
;;; should be loaded after yasnippet so that they can work together
(require 'auto-complete)
(require 'auto-complete-config)
;(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-20170124.1845/dict")
(ac-config-default)
;;; set the trigger key so that it can work together with yasnippet on tab key,
;;; if the word exists in yasnippet, pressing tab will cause yasnippet to
;;; activate, otherwise, auto-complete will
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")

;; auto complete clang
(add-to-list 'load-path "~/.emacs.d/elpa/auto-complete-clang-20140409.52/")
(require 'auto-complete-clang)



;;==================================================================
;; Magit
;;==================================================================
;; Disable backend git
;(setq vc-handled-backends nil)
(global-set-key (kbd "C-x g") 'magit-status)



;;==================================================================
;; Ido
;;==================================================================
;; enable ido mode
(require 'ido)
(ido-mode t)


;;==================================================================
;; Ivy
;;==================================================================
;; 
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")










;;; google-c-style.el --- Google's C/C++ style for c-mode

;; Keywords: c, tools

;; google-c-style.el is Copyright (C) 2008 Google Inc. All Rights Reserved.
;;
;; It is free software; you can redistribute it and/or modify it under the
;; terms of either:
;;
;; a) the GNU General Public License as published by the Free Software
;; Foundation; either version 1, or (at your option) any later version, or
;;
;; b) the "Artistic License".

;;; Commentary:

;; Provides the google C/C++ coding style. You may wish to add
;; `google-set-c-style' to your `c-mode-common-hook' after requiring this
;; file. For example:
;;
;;    (add-hook 'c-mode-common-hook 'google-set-c-style)
;;
;; If you want the RETURN key to go to the next line and space over
;; to the right place, add this to your .emacs right after the load-file:
;;
;;    (add-hook 'c-mode-common-hook 'google-make-newline-indent)

;;; Code:

;; For some reason 1) c-backward-syntactic-ws is a macro and 2)  under Emacs 22
;; bytecode cannot call (unexpanded) macros at run time:
(eval-when-compile (require 'cc-defs))

;; Wrapper function needed for Emacs 21 and XEmacs (Emacs 22 offers the more
;; elegant solution of composing a list of lineup functions or quantities with
;; operators such as "add")
(defun google-c-lineup-expression-plus-4 (langelem)
  "Indents to the beginning of the current C expression plus 4 spaces.

This implements title \"Function Declarations and Definitions\"
of the Google C++ Style Guide for the case where the previous
line ends with an open parenthese.

\"Current C expression\", as per the Google Style Guide and as
clarified by subsequent discussions, means the whole expression
regardless of the number of nested parentheses, but excluding
non-expression material such as \"if(\" and \"for(\" control
structures.

Suitable for inclusion in `c-offsets-alist'."
  (save-excursion
    (back-to-indentation)
    ;; Go to beginning of *previous* line:
    (c-backward-syntactic-ws)
    (back-to-indentation)
    (cond
     ;; We are making a reasonable assumption that if there is a control
     ;; structure to indent past, it has to be at the beginning of the line.
     ((looking-at "\\(\\(if\\|for\\|while\\)\\s *(\\)")
      (goto-char (match-end 1)))
     ;; For constructor initializer lists, the reference point for line-up is
     ;; the token after the initial colon.
     ((looking-at ":\\s *")
      (goto-char (match-end 0))))
    (vector (+ 4 (current-column)))))

;;;###autoload
(defconst google-c-style
  `((c-recognize-knr-p . nil)
    (c-enable-xemacs-performance-kludge-p . t) ; speed up indentation in XEmacs
    (c-basic-offset . 2)
    (indent-tabs-mode . nil)
    (c-comment-only-line-offset . 0)
    (c-hanging-braces-alist . ((defun-open after)
                               (defun-close before after)
                               (class-open after)
                               (class-close before after)
                               (inexpr-class-open after)
                               (inexpr-class-close before)
                               (namespace-open after)
                               (inline-open after)
                               (inline-close before after)
                               (block-open after)
                               (block-close . c-snug-do-while)
                               (extern-lang-open after)
                               (extern-lang-close after)
                               (statement-case-open after)
                               (substatement-open after)))
    (c-hanging-colons-alist . ((case-label)
                               (label after)
                               (access-label after)
                               (member-init-intro before)
                               (inher-intro)))
    (c-hanging-semi&comma-criteria
     . (c-semi&comma-no-newlines-for-oneline-inliners
        c-semi&comma-inside-parenlist
        c-semi&comma-no-newlines-before-nonblanks))
    (c-indent-comments-syntactically-p . t)
    (comment-column . 40)
    (c-indent-comment-alist . ((other . (space . 2))))
    (c-cleanup-list . (brace-else-brace
                       brace-elseif-brace
                       brace-catch-brace
                       empty-defun-braces
                       defun-close-semi
                       list-close-comma
                       scope-operator))
    (c-offsets-alist . ((arglist-intro google-c-lineup-expression-plus-4)
                        (func-decl-cont . ++)
                        (member-init-intro . ++)
                        (inher-intro . ++)
                        (comment-intro . 0)
                        (arglist-close . c-lineup-arglist)
                        (topmost-intro . 0)
                        (block-open . 0)
                        (inline-open . 0)
                        (substatement-open . 0)
                        (statement-cont
                         .
                         (,(when (fboundp 'c-no-indent-after-java-annotations)
                             'c-no-indent-after-java-annotations)
                          ,(when (fboundp 'c-lineup-assignments)
                             'c-lineup-assignments)
                          ++))
                        (label . /)
                        (case-label . +)
                        (statement-case-open . +)
                        (statement-case-intro . +) ; case w/o {
                        (access-label . /)
                        (innamespace . 0))))
  "Google C/C++ Programming Style.")

;;;###autoload
(defun google-set-c-style ()
  "Set the current buffer's c-style to Google C/C++ Programming
  Style. Meant to be added to `c-mode-common-hook'."
  (interactive)
  (make-local-variable 'c-tab-always-indent)
  (setq c-tab-always-indent t)
  (c-add-style "Google" google-c-style t))

;;;###autoload
(defun google-make-newline-indent ()
  "Sets up preferred newline behavior. Not set by default. Meant
  to be added to `c-mode-common-hook'."
  (interactive)
  (define-key c-mode-base-map "\C-m" 'newline-and-indent)
  (define-key c-mode-base-map [ret] 'newline-and-indent))

(provide 'google-c-style)
;;; google-c-style.el ends here










